/*!
    Author: Lukas (thelstv)
    Copyright: (c) https://lstv.space

    Last modified: 2025
    License: GPL-3.0
    Version: 5.1.1
    See: https://github.com/thelstv/LS
*/


// Do not migrate to @use
// Once Sass removes @import, I will be switching to a different preprocessor (possibly a custom one ðŸ¤”)
@import "css/variables.scss";
@import "css/themes.scss";
@import "css/essentials.scss";
@import 'css/colors.scss';
@import "css/normalize.scss";

%font {
    font-family: var(--font);
}

body {
    margin: 0;
}

:root {
    // Disable Chrome's auto dark mode (LS already handles schemes, and the auto dark mode breaks everything)
    color-scheme: only light;
}

[ls] {
    @extend %font;

    --space-tiny: 4px;
    --space-small: 8px;
    --space-medium: 16px;
    --space-large: 24px;
    --space-xlarge: 34px;
    --space-xxlarge: 44px;
    --space-xxxlarge: 64px;
    --space-huge: 84px;

    --padding-control-h: var(--space-medium);
    --padding-control-v: var(--space-small);
    --padding-content-h: var(--space-medium);
    --padding-content-v: var(--space-small);
    --padding-control-h-pill: var(--space-medium);
    --padding-label-h: var(--space-tiny);
    --padding-label-h-pill: var(--space-small);
    --padding-input-h: var(--space-small);

    --margin-control-v: 0;
    --margin-control-h: 0;
    --margin-content-v: var(--space-medium);
    --margin-content-v-large: var(--space-large);

    background: var(--background);
    color: var(--color);
    overflow-y: overlay;

    * {
        box-sizing: border-box;
    }

    :is(#{$button}, input, select, textarea) {
        @extend %font;

        box-sizing: border-box;
        border: 0;
        outline: none;
        position: relative;

        &:not(textarea) {
            line-height: 1;
        }
    }

    #{$button} {
        padding: var(--padding-control-v) var(--padding-control-h);
        margin: var(--margin-control-v) var(--margin-control-h);

        cursor: pointer;

        i {
            margin: 0 4px 0 2px;
        }

        i:only-child {
            margin: 0;
        }
    }

    input, textarea {
        height: calc(1em + (var(--padding-control-v) * 2));
        padding: 0 var(--padding-input-h);
        margin: var(--margin-control-v) var(--margin-control-h);
        color: inherit;
    }

    textarea {
        line-height: normal;
    }

    #{$button}:is(.square, .circle) {
        height: calc(1em + (var(--padding-control-v)* 2));
        width: calc(1em + (var(--padding-control-v)* 2));
        padding: 0;
    }

    #{$button}:is(.square, .circle) > :first-child {
        margin: 0;
        padding: 0;
    }

    a {
        color: var(--accent);
        text-decoration: none;
    }
    
    a:focus:not(.ls-button, .ls-plain) {
        box-shadow: 0 0 0 3px #0004;
        outline: 3px solid var(--accent);
        outline-offset: 3px;
        border-radius: 3px;
    }

    hr {
        border: 1px solid var(--elevate);
        border-radius: 10px;
        margin: var(--hr-spacing, 18px) 0
    }

    #{$textInput}::selection {
        background-color: var(--accent-mix-40);
    }

    h1 {
        font-weight: 800;
    }

    h2 {
        font-weight: 600;
    }

    h3 {
        font-weight: 500;
    }

    h4 {
        font-weight: 300;
    }

    // Questionalbe
    h3, h4 {
        color: var(--surface-8);
    }

    table {
        background-color: var(--elevate-0);
        border-radius: var(--border-radius);
        border-collapse: collapse;
        overflow: hidden;
        outline: 1px solid var(--elevate-1);
        box-shadow: 0 10px 20px 0 #0002;

        thead, tfoot {
            background: var(--elevate);
        }

        th {
            font-weight: 600;
        }

        :is(th,td) {
            padding: var(--space-tiny) var(--space-medium);
        }

        :is(th,td):not(:last-child) {
            border-right: 1px solid var(--elevate-1);
        }

        :is(tr, thead, tbody):not(:last-child) {
            border-bottom: 1px solid var(--elevate-1);
        }
    }
}

.ls-tfoot {
    background: var(--elevate);
    padding: var(--space-tiny);
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
}

.ls-table-wrap {
    overflow: auto;
    outline: 1px solid var(--elevate-1);
    border-radius: var(--border-radius);
    background-color: var(--elevate-0);
    box-shadow: 0 10px 20px 0 #0002;

    > table {
        outline: none;
        border-radius: 0;
        background: none;
        width: 100%;
        box-shadow: none;
    }
}

.no-transitions *, .no-transitions *:before, .no-transitions *:after {
    transition: none !important;
}

@each $size in tiny, small, medium, large, xlarge, xxlarge, xxxlarge, huge {
    @each $direction in top, bottom, left, right {
        .margin-#{$direction}-#{$size} {
            margin-#{$direction}: var(--space-#{$size});
        }
    }

    .margin-v-#{$size}#{if($size == medium, ', ls-div', '')} {
        margin-top: var(--space-#{$size});
        margin-bottom: var(--space-#{$size});
    }

    .margin-h-#{$size} {
        margin-left: var(--space-#{$size});
        margin-right: var(--space-#{$size});
    }
}


::-webkit-scrollbar {
    width: var(--scrollbar-size, 6px);
    height: var(--scrollbar-size, 6px);
}

::-webkit-scrollbar-track {
    background: var(--elevate);
}

::-webkit-scrollbar-thumb {
    border-radius: var(--scrollbar-radius, 8px);
    background: var(--elevate-1);
}

::-webkit-scrollbar-thumb:hover {
    background: var(--elevate-2);
}


/* A a fix around Chrome's (even Firefox for some reason) aggressive autofill styling forcing (a hardcoded white background, completely ignoring the theme or any accessibility standards).
   In my opinion, this is just awful design, kills accessibility, makes pages ugly and distracting, serves no real purpose, and there isn't a way to disable it.

   This attempts to reverse as much of this terrible override as possible, but it is not perfect, and may still slightly break the input until the user changes the value.
   A JS action may still be needed to truly fix this.

   Someone should urge Google to fix this, I don't even know how something like this happens in the first place.
   It's not like it's for legacy purposes either, removing it wouldn't break anything.
*/
input:-webkit-autofill {
    @extend %font;
    -webkit-box-shadow: 0 0 0 1000px var(--background) inset !important;
    box-shadow: 0 0 0 1000px var(--background) inset !important;
    -webkit-text-fill-color: var(--color) !important;
    caret-color: var(--color) !important;
}